"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const readline_1 = __importDefault(require("readline"));
const tty_1 = __importDefault(require("tty"));
const CLEAR_WHOLE_LINE = 0;
// From:
// https://github.com/yarnpkg/yarn/blob/53d8004229f543f342833310d5af63a4b6e59c8a/src/reporters/console/util.js
function clearLine(terminal) {
    if (!chalk_1.default.supportsColor) {
        if (terminal instanceof tty_1.default.WriteStream) {
            // terminal
            if (terminal.columns > 0) {
                terminal.write(`\r${' '.repeat(terminal.columns - 1)}`);
            }
            terminal.write(`\r`);
        }
        // ignore piping to file
    }
    else {
        readline_1.default.clearLine(terminal, CLEAR_WHOLE_LINE);
        readline_1.default.cursorTo(terminal, 0);
    }
}
exports.clearLine = clearLine;
function warn(message) {
    clearLine(process.stderr);
    process.stderr.write(`${chalk_1.default.yellow('warning')} ${message}\n`);
}
exports.warn = warn;
function error(message) {
    clearLine(process.stderr);
    process.stderr.write(`${chalk_1.default.red('error')} ${message}\n`);
}
exports.error = error;
async function getStdinAsString() {
    let result = '';
    return new Promise(resolve => {
        process.stdin.setEncoding('utf-8');
        process.stdin.on('readable', () => {
            let chunk;
            while ((chunk = process.stdin.read())) {
                result += chunk;
            }
        });
        process.stdin.on('end', () => {
            resolve(result);
        });
    });
}
exports.getStdinAsString = getStdinAsString;
//# sourceMappingURL=console_utils.js.map